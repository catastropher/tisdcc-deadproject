#!/usr/bin/python
#   tisdcc - Compiles C programs targetting TI z80 calculators
#   Copyright (C) 2009 Conrad Meyer <konrad@tylerc.org>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.



import optparse
import sys

import libtisdcc
CodeType = libtisdcc.CodeType



def main():
  # TODO: don't hardcode this...
  libdir = "/home/konrad/projects/tisdcc/startup"
  
  parser = optparse.OptionParser(usage="Usage: %prog [options] file...", \
      version="%prog " + libtisdcc.VERSION)

  parser.add_option("-c", None, help="compile, assemble only (do not link)", \
      action="store_true", dest="do_not_link")
  parser.add_option("-S", None, help="compile only (do not assemble)", \
      action="store_true", dest="do_not_assemble")
  parser.add_option("-V", None, help="do not convert to a graphlink var", \
      dest="do_not_varup", action="store_true")
  parser.add_option("-D", None, dest="defines", action="append", \
      help="predefine NAME as a macro", metavar="NAME")
  parser.add_option("-t", None, metavar="CALC", dest="platform", \
      help="target CALC (ti83, ti83p_ion, etc.)")
  parser.add_option("-o", None, dest="filename", help="output to FILE", \
      metavar="FILE")

  options, args = parser.parse_args()

  if options.platform is None:
    print "Sorry, please specify what model you are targetting."
    sys.exit(1)

  cos = []
  for arg in args:
    cos.append(libtisdcc.codeobject_from_file(arg))

  if options.do_not_assemble:
    # Only compile all C files, ignore everything else
    for co in cos:
      origco = co
      if co.type == CodeType.C:
        co = libtisdcc.compileonly(co)    # TODO: respect extraflags
      else:
        raise Exception("You can't compile '%s'!" % co.srcfile)

      if len(cos) == 1 and options.filename is not None:
        co.writetofile(options.filename)
      else:
        co.writetofile(origco.replaceext(".asm"))

    return

  else:
    mapping = {}
    newcos = []
    for co in cos:
      origco = co
      if co.type == CodeType.C:
        co = libtisdcc.compile(co)    # TODO: respect extraflags
      if co.type == CodeType.ASM:
        co = libtisdcc.assemble(co)
      if co.type == CodeType.IHX or co.type == CodeType.PROGRAM:
        raise Exception("Can't compile against a binary!")
      newcos.append(co)
      mapping[origco] = co

    if options.do_not_link:
      # -c
      for old, new in mapping.items():
        if old == new: continue
        new.writetofile(old.replaceext(".o"))

      return

    # link a binary or create a library
    if options.filename is None:
      options.filename = "a." + libtisdcc.binary_extension(options.platform)
      print >> sys.stderr, "W: No filename specified, using: '%s'" % options.filename
    outputtype = libtisdcc.infer_type_from_file(options.filename)
    assert(outputtype in (CodeType.PROGRAM, CodeType.LIBRARY, CodeType.IHX))

    if outputtype in (CodeType.PROGRAM, CodeType.IHX):
      # TODO: respect extraflags
      resco = libtisdcc.link(newcos, options.platform, libdir, options.filename)
      if not options.do_not_varup:
        resco = libtisdcc.ihx_to_prgm(resco, options.filename, options.platform)
    else:
      resco = libtisdcc.library(newcos)

    resco.writetofile(options.filename)



if __name__ == "__main__":
  main()
