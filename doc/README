So, b_call wrappers will probably look something like this (sdcc passes
arguments on the stack -- I can't find a better way of specifying
assembly functions):

void foobar(int arg1, ..., int argn) __naked
{
  arg1; ... ; argn; // avoid variable unused warnings

  __asm
  push ix ; save old ix
  push hl ; We need to save HL,BC,DE if we clobber them.
  push bc ; Note: return type of byte -> we can clobber l
          ;                      short -> we can clobber hl
          ;                      long -> we can clobber de,hl
          ;                      void -> can't clobber anything

  ld ix,#0
  add ix,sp   ; sp -> ix

  ; load arg1 off the stack (stored LE) to HL
  ld l,8(ix)
  ld h,9(ix)

  ; load arg2 to BC
  ld c,10(ix)
  ld b,11(ix)

  BCALL(_foobar___db) ; symbol in .inc is "_foobar"
                      ; "___db" means it's in the form
                      ; 0xLL, 0xHH
                      ; if it's 0xHHLL in the .inc file

  pop bc
  pop hl
  pop ix
  ret
  __endasm;
}

If you have inline assembly in your code, be sure to compile-only it
(tisdcc -S), then see if sdcc's as-z80 produces any errors
(sdcc-as-z80 on Fedora):

  $ sdcc-as-z80 -o foo.o foo.asm
  foo.asm:52: Error: <a> machine specific addressing or addressing mode error

Keep in mind: if it cannot find something for an immediate value, it will
silently fill zero. Fun.

Also (note to self mostly): prefix labels with '#' when using them as
immediates. E.g.:
  
  ld hl, #_str
  b_call(_PutS)
  ret
_str:
  .ascii "Hello"
  .db 0

As far as parameter / return value semantics goes, it looks like SDCC expects
all the arguments on the stack. 8-bit return values go in L, 16-bit in HL,
and 32-bit in DEHL. SDCC is caller-saves by default, but this does NOT apply
to __naked functions -- they need to save whatever they use.
